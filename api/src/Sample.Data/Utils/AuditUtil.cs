using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Sample.Data.Entities;

namespace Sample.Data.Utils
{
    public class AuditUtil
    {
        public static IList<AuditEntry> MapEntityToAuditEntries(IEnumerable<EntityEntry> entries)
        {
            var auditEntries = new List<AuditEntry>();
            var ignoreStates = new [] { EntityState.Detached, EntityState.Unchanged };

            foreach (var entry in entries)
            {
                var entityState = entry.State;
                if (entry.Entity is Audit || ignoreStates.Contains(entry.State))
                {
                    continue;
                }

                // get requested-by for only model entities
                if (entry.Entity is BaseEntity baseEntity)
                {
                    entityState = baseEntity.IsInactive ? EntityState.Deleted : entry.State;
                }

                var auditEntry = new AuditEntry
                {
                    EntityEntry = entry,
                    State = entityState,
                    TableName = entry.Entity.GetType().Name,
                };

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    var propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entityState)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }

                auditEntries.Add(auditEntry);
            }

            return auditEntries;
        }

        public static IList<Audit> MapAuditEntryToAudit(IEnumerable<AuditEntry> auditEntries)
        {
            var auditList = new List<Audit>();
            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var property in auditEntry.TemporaryProperties)
                {
                    var propertyValue = property.CurrentValue;
                    var propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = propertyValue;
                    }
                    else
                    {
                        auditEntry.NewValues[propertyName] = propertyValue;
                    }
                }

                auditList.Add(auditEntry.ToAudit());
            }

            return auditList;
        }
    }
}